# Fixed Databricks App Configuration for Task Manager
# This version properly serves the React frontend

command:
  - sh
  - -c
  - |
    # Install Python dependencies
    echo "üì¶ Installing Python dependencies..."
    pip install fastapi uvicorn pydantic python-multipart aiofiles
    
    # Create integrated FastAPI application
    echo "üîß Setting up application..."
    cat > /tmp/app.py << 'PYEOF'
    from fastapi import FastAPI, HTTPException
    from fastapi.staticfiles import StaticFiles
    from fastapi.responses import FileResponse, HTMLResponse
    from fastapi.middleware.cors import CORSMiddleware
    from pydantic import BaseModel
    from typing import List, Optional
    from datetime import datetime
    from pathlib import Path
    import os
    
    app = FastAPI(title="Task Manager API", version="1.0.0")
    
    # CORS middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # In-memory task storage
    tasks_db = []
    task_id_counter = 1
    
    # Models
    class TaskCreate(BaseModel):
        title: str
        description: Optional[str] = ""
        priority: str = "medium"
    
    class Task(BaseModel):
        id: int
        title: str
        description: Optional[str] = ""
        priority: str = "medium"
        completed: bool = False
        created_at: str
    
    # API Endpoints
    @app.get("/api/health")
    def health_check():
        return {
            "status": "healthy",
            "app": "Task Manager",
            "timestamp": datetime.now().isoformat(),
            "total_tasks": len(tasks_db)
        }
    
    @app.get("/api/tasks", response_model=List[Task])
    def get_tasks():
        return tasks_db
    
    @app.post("/api/tasks", response_model=Task)
    def create_task(task: TaskCreate):
        global task_id_counter
        new_task = Task(
            id=task_id_counter,
            title=task.title,
            description=task.description or "",
            priority=task.priority,
            completed=False,
            created_at=datetime.now().isoformat()
        )
        tasks_db.append(new_task.dict())
        task_id_counter += 1
        return new_task
    
    @app.patch("/api/tasks/{task_id}/toggle")
    def toggle_task(task_id: int):
        for task in tasks_db:
            if task["id"] == task_id:
                task["completed"] = not task["completed"]
                return {"message": "Task updated", "task": task}
        raise HTTPException(status_code=404, detail="Task not found")
    
    @app.delete("/api/tasks/{task_id}")
    def delete_task(task_id: int):
        for i, task in enumerate(tasks_db):
            if task["id"] == task_id:
                deleted_task = tasks_db.pop(i)
                return {"message": "Task deleted", "task": deleted_task}
        raise HTTPException(status_code=404, detail="Task not found")
    
    @app.get("/api/stats")
    def get_stats():
        total = len(tasks_db)
        completed = sum(1 for task in tasks_db if task["completed"])
        pending = total - completed
        priority_counts = {"low": 0, "medium": 0, "high": 0}
        for task in tasks_db:
            priority_counts[task["priority"]] += 1
        return {
            "total_tasks": total,
            "completed_tasks": completed,
            "pending_tasks": pending,
            "by_priority": priority_counts
        }
    
    # Add demo data on startup
    demo_tasks = [
        {"title": "Welcome to Task Manager!", "description": "This is your first task", "priority": "high"},
        {"title": "Try creating a new task", "description": "Click the Add Task button", "priority": "medium"},
        {"title": "Mark tasks as complete", "description": "Click the checkbox", "priority": "low"}
    ]
    for task_data in demo_tasks:
        create_task(TaskCreate(**task_data))
    
    # Check for frontend directory
    FRONTEND_DIR = Path("/workspace/frontend")
    STATIC_DIR = FRONTEND_DIR / "static"
    INDEX_HTML = FRONTEND_DIR / "index.html"
    
    print(f"üîç Checking frontend directory: {FRONTEND_DIR}")
    print(f"   Frontend exists: {FRONTEND_DIR.exists()}")
    if FRONTEND_DIR.exists():
        print(f"   Files in frontend: {list(FRONTEND_DIR.iterdir())}")
    print(f"   Index.html exists: {INDEX_HTML.exists()}")
    print(f"   Static dir exists: {STATIC_DIR.exists()}")
    
    # Mount static files if they exist
    if STATIC_DIR.exists() and STATIC_DIR.is_dir():
        app.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")
        print(f"‚úÖ Mounted /static directory")
    else:
        print(f"‚ö†Ô∏è  Static directory not found at {STATIC_DIR}")
    
    # Serve React app for root and all non-API routes
    @app.get("/", response_class=HTMLResponse)
    async def serve_root():
        """Serve React app at root"""
        if INDEX_HTML.exists():
            with open(INDEX_HTML, 'r') as f:
                return f.read()
        return """
        <html>
            <body style="font-family: Arial; padding: 40px; text-align: center;">
                <h1>üöÄ Task Manager API is Running!</h1>
                <p>Frontend files not found at /workspace/frontend/</p>
                <p><a href="/docs">View API Documentation</a></p>
                <p><a href="/api/health">Health Check</a></p>
            </body>
        </html>
        """
    
    @app.get("/{full_path:path}")
    async def serve_react_app(full_path: str):
        """
        Serve the React application for all other routes.
        This enables client-side routing.
        """
        # Skip API routes
        if full_path.startswith("api/"):
            raise HTTPException(status_code=404, detail="API endpoint not found")
        
        # Check if it's a specific file
        file_path = FRONTEND_DIR / full_path
        if file_path.is_file():
            return FileResponse(file_path)
        
        # Otherwise serve index.html for React routing
        if INDEX_HTML.exists():
            return FileResponse(INDEX_HTML)
        
        # Fallback if no frontend
        return {
            "message": "Task Manager API",
            "docs": "/docs",
            "health": "/api/health",
            "note": "React frontend not found"
        }
    
    PYEOF
    
    # Run the application
    echo ""
    echo "üöÄ Starting Task Manager..."
    echo "üìÅ Expected frontend location: /workspace/frontend/"
    echo "üîå API endpoints available at /api/*"
    echo "üìö API docs available at /docs"
    echo ""
    
    # List what we have
    echo "üìã Workspace contents:"
    ls -la /workspace/ 2>/dev/null || echo "   /workspace/ not accessible"
    
    if [ -d "/workspace/frontend" ]; then
        echo ""
        echo "‚úÖ Frontend directory found:"
        ls -la /workspace/frontend/ | head -10
    else
        echo ""
        echo "‚ö†Ô∏è  Frontend directory NOT found"
        echo "   This will serve API only"
    fi
    
    echo ""
    echo "üåê Starting server on port 8000..."
    uvicorn app:app --host 0.0.0.0 --port 8000 --app-dir /tmp


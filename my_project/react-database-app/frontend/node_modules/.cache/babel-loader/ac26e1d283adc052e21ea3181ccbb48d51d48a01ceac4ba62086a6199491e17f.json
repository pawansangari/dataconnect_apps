{"ast":null,"code":"import _objectSpread from\"/Users/pawanpreet.sangari/dataconnect_apps/my_project/react-database-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000/api';const api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Request interceptor for logging\napi.interceptors.request.use(config=>{console.log('API Request:',config.method.toUpperCase(),config.url);return config;},error=>{console.error('Request Error:',error);return Promise.reject(error);});// Response interceptor for error handling\napi.interceptors.response.use(response=>{return response;},error=>{if(error.response){// Server responded with error\nconsole.error('API Error:',error.response.status,error.response.data);throw new Error(error.response.data.detail||'An error occurred');}else if(error.request){// Request made but no response\nconsole.error('Network Error:',error.request);throw new Error('Network error. Please check your connection.');}else{// Something else happened\nconsole.error('Error:',error.message);throw new Error(error.message);}});// API functions\nexport const submitApplication=async applicationData=>{try{// Transform date fields to proper format\nconst transformedData={basic_information:_objectSpread(_objectSpread({},applicationData.basicInformation),{},{npi:applicationData.basicInformation.npi||null}),identifying_information:_objectSpread(_objectSpread({},applicationData.identifyingInformation),{},{date_of_birth:applicationData.identifyingInformation.date_of_birth||null,ssn:applicationData.identifyingInformation.ssn||null,ein:applicationData.identifyingInformation.ein||null}),business_address:_objectSpread(_objectSpread({},applicationData.businessAddress),{},{enumeration_date:applicationData.businessAddress.enumeration_date||null}),contact_person:applicationData.contactPerson,certification:applicationData.certification};const response=await api.post('/applications',transformedData);return response.data;}catch(error){throw error;}};export const getApplications=async function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:50;let offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;try{const response=await api.get('/applications',{params:{limit,offset}});return response.data;}catch(error){throw error;}};export const getApplication=async applicationId=>{try{const response=await api.get(\"/applications/\".concat(applicationId));return response.data;}catch(error){throw error;}};export const checkHealth=async()=>{try{const response=await api.get('/health');return response.data;}catch(error){throw error;}};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","Error","detail","message","submitApplication","applicationData","transformedData","basic_information","_objectSpread","basicInformation","npi","identifying_information","identifyingInformation","date_of_birth","ssn","ein","business_address","businessAddress","enumeration_date","contact_person","contactPerson","certification","post","getApplications","limit","arguments","length","undefined","offset","get","params","getApplication","applicationId","concat","checkHealth"],"sources":["/Users/pawanpreet.sangari/dataconnect_apps/my_project/react-database-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(\n  (config) => {\n    console.log('API Request:', config.method.toUpperCase(), config.url);\n    return config;\n  },\n  (error) => {\n    console.error('Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response) {\n      // Server responded with error\n      console.error('API Error:', error.response.status, error.response.data);\n      throw new Error(error.response.data.detail || 'An error occurred');\n    } else if (error.request) {\n      // Request made but no response\n      console.error('Network Error:', error.request);\n      throw new Error('Network error. Please check your connection.');\n    } else {\n      // Something else happened\n      console.error('Error:', error.message);\n      throw new Error(error.message);\n    }\n  }\n);\n\n// API functions\nexport const submitApplication = async (applicationData) => {\n  try {\n    // Transform date fields to proper format\n    const transformedData = {\n      basic_information: {\n        ...applicationData.basicInformation,\n        npi: applicationData.basicInformation.npi || null\n      },\n      identifying_information: {\n        ...applicationData.identifyingInformation,\n        date_of_birth: applicationData.identifyingInformation.date_of_birth || null,\n        ssn: applicationData.identifyingInformation.ssn || null,\n        ein: applicationData.identifyingInformation.ein || null\n      },\n      business_address: {\n        ...applicationData.businessAddress,\n        enumeration_date: applicationData.businessAddress.enumeration_date || null\n      },\n      contact_person: applicationData.contactPerson,\n      certification: applicationData.certification\n    };\n\n    const response = await api.post('/applications', transformedData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getApplications = async (limit = 50, offset = 0) => {\n  try {\n    const response = await api.get('/applications', {\n      params: { limit, offset }\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getApplication = async (applicationId) => {\n  try {\n    const response = await api.get(`/applications/${applicationId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const checkHealth = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default api;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}